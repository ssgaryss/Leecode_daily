#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
using namespace std;

//正确但是超出时间限制
int longestAwesome_1(string s) {
	//对于一本超赞子字符串，其各个元素最多有一个的数量为奇数
	//由于s只包含数字字符所以我们只需要统计十个字符出现的数量times[10]奇偶性(1表示奇数，0表示偶数),index 0-9表示各个数字
	//任何一个子串s[i:j]的times[i:j] = times[0:i] ^ times[0:j] (因为奇偶性直接异或运算即可) 
	unordered_map<int, int> times; //<i, times[0:j]>后者是10位二进制数即[0,1024)
	times[0] = 0; //j为0即空字符串所有字符出现0次，times为全0
	int longest = 0;
	for (int i = 0; i < s.length() + 1; i++) {
		if (i < s.length()) {
			times[i + 1] = times[i] ^ (1 << (s[i] - '0'));
		}
		for (int j = 0; j < i; j++) {
			//对于一个二进制数n只有一个1，比如0001000000，它是2的指数，有n &（n-1）= 0
			//int temp = (times[j] ^ times[i]) & ((times[j] ^ times[i]) - 1);
			//int temp0 = (times[j] ^ times[i]);
			//int temp1 = ((times[j] ^ times[i]) - 1);
			//cout << i << " " << j << " " << temp << " " << temp0 << " " << temp1 << "\n";
			if (((times[j] ^ times[i]) & ((times[j] ^ times[i]) - 1)) == 0 || (times[j] ^ times[i]) == 0) {
				longest = longest < i - j ? i - j : longest;
			}
		}
	}
	return longest;
}

int longestAwesome_2(string s) {
	unordered_map<int, int> times;//<times[0:j], j>前者是10位二进制数即[0,1024)
	times[0] = -1;
	int longest = 0;
	int sequence = 0;
	for (int i = 0; i < s.length(); i++) {
		sequence ^= 1 << (s[i] - '0');
		if (times.count(sequence)) {
			longest = max(longest, i - times[sequence]);
		}
		else {
			times[sequence] = i;
		}
		for (int j = 0; j < 10; j++) {
			if (times.count(sequence ^ (1 << j))) {
				longest = max(longest, i - times[sequence ^ (1 << j)]);
			}
		}
	}
	return longest;
}

//再次优化
const int D = 10;
int longestAwesome(string s) {
	int n = s.size();
	vector<int> pos(1 << D, n); // n 表示没有找到异或前缀和
	pos[0] = -1; // pre[-1] = 0 表示前缀异或和为0的状态已经有了，它的区间末尾下标为-1
	int ans = 0, pre = 0;
	for (int i = 0; i < n; i++) {
		pre ^= 1 << (s[i] - '0');
		ans = max(ans, i - pos[pre]); // 偶数
		for (int d = 0; d < D; d++) ans = max(ans, i - pos[pre ^ (1 << d)]); // 奇数
		if (pos[pre] == n) pos[pre] = i; // 首次遇到值为 pre 的前缀异或和，记录其下标 i
	}
	return ans;
}

int main() {
	string s = "";
	int longest = longestAwesome(s);
	cout << longest;
}